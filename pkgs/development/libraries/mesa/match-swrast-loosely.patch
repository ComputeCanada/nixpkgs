commit 062c8e255524cfa0cdc636eaa7e82b929c43a533
Author: Tom Hughes <tom@compton.nu>
Date:   Tue Jun 2 13:40:37 2015 +0100

    Match swrast modes more loosely

diff --git a/src/glx/dri_common.c b/src/glx/dri_common.c
index 63c8de3..1a62ee2 100644
--- a/src/glx/dri_common.c
+++ b/src/glx/dri_common.c
@@ -266,6 +266,36 @@ scalarEqual(struct glx_config *mode, unsigned int attrib, unsigned int value)
 }
 
 static int
+scalarGreaterEqual(struct glx_config *mode, unsigned int attrib, unsigned int value)
+{
+   unsigned int glxValue;
+   int i;
+
+   for (i = 0; i < ARRAY_SIZE(attribMap); i++)
+      if (attribMap[i].attrib == attrib) {
+         glxValue = *(unsigned int *) ((char *) mode + attribMap[i].offset);
+         return glxValue == GLX_DONT_CARE || glxValue >= value;
+      }
+
+   return GL_TRUE;              /* Is a non-existing attribute greater than or equal to value? */
+}
+
+static int
+booleanSupported(struct glx_config *mode, unsigned int attrib, unsigned int value)
+{
+   unsigned int glxValue;
+   int i;
+
+   for (i = 0; i < ARRAY_SIZE(attribMap); i++)
+      if (attribMap[i].attrib == attrib) {
+         glxValue = *(unsigned int *) ((char *) mode + attribMap[i].offset);
+         return glxValue == GLX_DONT_CARE || glxValue;
+      }
+
+   return GL_TRUE;              /* Is a non-existing attribute supported? */
+}
+
+static int
 driConfigEqual(const __DRIcoreExtension *core,
                struct glx_config *config, const __DRIconfig *driConfig)
 {
@@ -313,10 +343,41 @@ driConfigEqual(const __DRIcoreExtension *core,
          if (value & __DRI_ATTRIB_TEXTURE_RECTANGLE_BIT)
             glxValue |= GLX_TEXTURE_RECTANGLE_BIT_EXT;
          if (config->bindToTextureTargets != GLX_DONT_CARE &&
-             glxValue != config->bindToTextureTargets)
+             config->bindToTextureTargets &&
+             glxValue != (config->bindToTextureTargets & glxValue))
+            return GL_FALSE;
+         break;
+
+      case __DRI_ATTRIB_STENCIL_SIZE:
+      case __DRI_ATTRIB_ACCUM_RED_SIZE:
+      case __DRI_ATTRIB_ACCUM_GREEN_SIZE:
+      case __DRI_ATTRIB_ACCUM_BLUE_SIZE:
+      case __DRI_ATTRIB_ACCUM_ALPHA_SIZE:
+         if (value != 0 && !scalarEqual(config, attrib, value))
             return GL_FALSE;
          break;
 
+      case __DRI_ATTRIB_DOUBLE_BUFFER:
+      case __DRI_ATTRIB_FRAMEBUFFER_SRGB_CAPABLE:
+          if (value && !booleanSupported(config, attrib, value))
+            return GL_FALSE;
+          break;
+
+      case __DRI_ATTRIB_BIND_TO_TEXTURE_RGB:
+      case __DRI_ATTRIB_BIND_TO_TEXTURE_RGBA:
+      case __DRI_ATTRIB_BIND_TO_MIPMAP_TEXTURE:
+          break;
+
+      case __DRI_ATTRIB_SAMPLE_BUFFERS:
+      case __DRI_ATTRIB_SAMPLES:
+      case __DRI_ATTRIB_AUX_BUFFERS:
+      case __DRI_ATTRIB_MAX_PBUFFER_WIDTH:
+      case __DRI_ATTRIB_MAX_PBUFFER_HEIGHT:
+      case __DRI_ATTRIB_MAX_PBUFFER_PIXELS:
+         if (!scalarGreaterEqual(config, attrib, value))
+            return GL_FALSE;
+         break;
+
       default:
          if (!scalarEqual(config, attrib, value))
             return GL_FALSE;
